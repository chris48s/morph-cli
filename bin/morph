#!/usr/bin/env ruby
# Commandline client for controlling morph and running scrapers and things

require "thor"
require "rest_client"
# TODO Do compression on the tar file
#require 'zlib'
require 'archive/tar/minitar'
require 'pathname'
require 'json'
require 'morph-cli'

class MorphThor < Thor
  class_option :dev, default: false, type: :boolean, desc: "Run against a local dev of Morph running at http://localhost:3000"

  desc "[execute]", "execute morph scraper"
  option :directory, :default => Dir.getwd

  def execute
    api_key = MorphCLI.retrieve_api_key
    if api_key.nil?
      api_key = ask_and_save_api_key(options)
    end

    api_key_is_valid = false
    until api_key_is_valid
      begin
        puts "Uploading and running..."
        file = MorphCLI.create_tar(options[:directory], MorphCLI.all_paths(options[:directory]))
        result = RestClient.post("#{MorphCLI.base_url(options)}/run", :api_key => api_key, :code => file)
        api_key_is_valid = true
      rescue RestClient::Unauthorized
        puts "Your key isn't working. Let's try again."
        api_key = ask_and_save_api_key(options)
      end
    end
    # Interpret each line separately as json
    result.split("\n").each do |line|
      a = JSON.parse(line)
      if a["stream"] == "stdout"
        s = $stdout
      elsif a["stream"] == "stderr"
        s = $stderr
      else
        raise "Unknown stream"
      end
      s.puts a["text"]
    end
  end

  no_commands {
    def ask_and_save_api_key(options)
      api_key = ask("What is your key? (Go to #{MorphCLI.base_url(options)}/settings)")
      MorphCLI.save_api_key(api_key)
      api_key
    end
  }
end

# If morph is run without any parameters it's the same as "morph execute"
MorphThor.start(ARGV.empty? ? ["execute"] : ARGV)
