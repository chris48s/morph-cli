#!/usr/bin/env ruby
# Commandline client for controlling morph and running scrapers and things

require "thor"
require "excon"
# TODO Do compression on the tar file
#require 'zlib'
require 'archive/tar/minitar'

class MorphCLI < Thor
  desc "[execute]", "execute morph scraper"
  option :directory, :default => Dir.getwd

  def execute
    puts "This is where I would be executing the scraper in #{options[:directory]}"
    # Let's start by just sending a file to a local test server
    file = create_dir_tar(options[:directory])
    begin
      chunk_count = 0
      chunker = lambda do
        if chunk_count == 0
          v = "key=1234abcd&code="
        else
          v = URI.encode_www_form_component(file.read(Excon.defaults[:chunk_size]).to_s)
        end
        chunk_count += 1
        puts v
        v
      end

      Excon.defaults[:chunk_size] = 1000
      Excon.post("http://localhost:3000/run", :headers => { "Content-Type" => "multipart/form-data", "Transfer-Encoding" => "chunked" }, :request_block => chunker)
    rescue Excon::Errors::SocketError => e
      puts "Hmmm.. Can't connect to Morph: #{e}"
    end
  end

  no_commands {
    # Nicked from docker-api gem
    # TODO Temporary file should be named differently every time
    def create_dir_tar(directory)
      cwd = FileUtils.pwd
      tempfile = File.new('/tmp/out', 'wb')
      FileUtils.cd(directory)
      Archive::Tar::Minitar.pack('.', tempfile)
      File.new('/tmp/out', 'r')
    ensure
      FileUtils.cd(cwd)
    end    
  }

end

# If morph is run without any parameters it's the same as "morph execute"
MorphCLI.start(ARGV.empty? ? ["execute"] : ARGV)
