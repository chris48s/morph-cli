#!/usr/bin/env ruby
# Commandline client for controlling morph and running scrapers and things

require "thor"
require "rest_client"
# TODO Do compression on the tar file
#require 'zlib'
require 'archive/tar/minitar'
require 'pathname'
require 'json'

class MorphCLI < Thor
  desc "[execute]", "execute morph scraper"
  option :directory, :default => Dir.getwd

  def execute
    puts "Uploading code..."
    file = create_tar(options[:directory], all_paths(options[:directory]))
    result = RestClient.post("http://localhost:3000/run", :key => "1234abcd", :code => file)
    # Interpret each line separately as json
    result.split("\n").each do |line|
      a = JSON.parse(line)
      if a["stream"] == "stdout"
        s = $stdout
      elsif a["stream"] == "stderr"
        s = $stderr
      else
        raise "Unknown stream"
      end
      s.puts a["text"]
    end
  end

  no_commands {
    # TODO Temporary file should be named differently every time
    def create_dir_tar(directory)
      in_directory(directory) do
        tempfile = File.new('/tmp/out', 'wb')
        Archive::Tar::Minitar.pack('.', tempfile)
        File.new('/tmp/out', 'r')
      end
    end

    def in_directory(directory)
      cwd = FileUtils.pwd
      FileUtils.cd(directory)
      yield
    ensure
      FileUtils.cd(cwd)
    end

    def create_tar(directory, paths)
      tempfile = File.new('/tmp/out', 'wb')

      in_directory(directory) do
        begin
          tar = Archive::Tar::Minitar::Output.new("/tmp/out")
          paths.each do |entry|
            Archive::Tar::Minitar.pack_file(entry, tar)
          end
        ensure
          tar.close
        end
      end
      File.new('/tmp/out', 'r')
    end

    # Relative paths to all the files in the given directory (recursive)
    # (except for anything below a directory starting with ".")
    def all_paths(directory)
      result = []
      Find.find(directory) do |path|
        if FileTest.directory?(path)
          if File.basename(path)[0] == ?.
            Find.prune
          end
        else
          result << Pathname.new(path).relative_path_from(Pathname.new(directory)).to_s
        end      
      end
      result
    end

    # Relative path of database file (if it exists)
    def database_path(directory)
      path = "data.sqlite"
      path if File.exists?(File.join(directory, path))
    end
  }

end

# If morph is run without any parameters it's the same as "morph execute"
MorphCLI.start(ARGV.empty? ? ["execute"] : ARGV)
